<?php
/**
 * Database Configuration
 * Generated by installation script
 */

class Database {
    private $host = 'localhost';
    private $db_name = 'ping_pong_tournament';
    private $username = 'root';
    private $password = '';
    private $port = 3306;
    private $charset = 'utf8mb4';
    
    private $pdo;
    private static $instance = null;
    private $queryCount = 0;
    private $queryLog = [];
    private $transactionLevel = 0;
    
    private function __construct() {
        $this->connect();
    }
    
    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    public function __clone() {
        throw new Exception("Cannot clone Database instance");
    }
    
    public function __wakeup() {
        throw new Exception("Cannot unserialize Database instance");
    }
    
    private function connect() {
        try {
            $dsn = "mysql:host={$this->host};port={$this->port};dbname={$this->db_name};charset={$this->charset}";
            
            $options = [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
                PDO::ATTR_PERSISTENT => true,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES {$this->charset} COLLATE utf8mb4_unicode_ci",
                PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,
                PDO::ATTR_TIMEOUT => 30
            ];
            
            $this->pdo = new PDO($dsn, $this->username, $this->password, $options);
            $this->pdo->exec("SET sql_mode = 'STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'");
            $this->pdo->exec("SET time_zone = '+07:00'");
            
        } catch(PDOException $e) {
            throw new Exception("Database connection failed: " . $e->getMessage());
        }
    }
    
    public function getConnection() {
        if (!$this->isConnected()) {
            $this->connect();
        }
        return $this->pdo;
    }
    
    private function isConnected() {
        try {
            $this->pdo->query('SELECT 1');
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }
    
    public function beginTransaction() {
        try {
            if ($this->transactionLevel === 0) {
                $result = $this->pdo->beginTransaction();
            } else {
                $savepointName = 'savepoint_' . $this->transactionLevel;
                $this->pdo->exec("SAVEPOINT $savepointName");
                $result = true;
            }
            $this->transactionLevel++;
            return $result;
        } catch (PDOException $e) {
            throw $e;
        }
    }
    
    public function commit() {
        try {
            $this->transactionLevel--;
            if ($this->transactionLevel === 0) {
                $result = $this->pdo->commit();
            } else {
                $savepointName = 'savepoint_' . $this->transactionLevel;
                $this->pdo->exec("RELEASE SAVEPOINT $savepointName");
                $result = true;
            }
            return $result;
        } catch (PDOException $e) {
            throw $e;
        }
    }
    
    public function rollback() {
        try {
            $this->transactionLevel--;
            if ($this->transactionLevel === 0) {
                $result = $this->pdo->rollback();
            } else {
                $savepointName = 'savepoint_' . $this->transactionLevel;
                $this->pdo->exec("ROLLBACK TO SAVEPOINT $savepointName");
                $result = true;
            }
            return $result;
        } catch (PDOException $e) {
            throw $e;
        }
    }
    
    public function execute($sql, $params = []) {
        $startTime = microtime(true);
        try {
            $stmt = $this->pdo->prepare($sql);
            $result = $stmt->execute($params);
            $executionTime = microtime(true) - $startTime;
            $this->logQuery($sql, $params, $executionTime);
            return $stmt;
        } catch (PDOException $e) {
            throw $e;
        }
    }
    
    public function fetchOne($sql, $params = []) {
        $stmt = $this->execute($sql, $params);
        return $stmt->fetch();
    }
    
    public function fetchAll($sql, $params = []) {
        $stmt = $this->execute($sql, $params);
        return $stmt->fetchAll();
    }
    
    public function insert($table, $data) {
        $columns = array_keys($data);
        $placeholders = ':' . implode(', :', $columns);
        $columnsList = implode(', ', $columns);
        $sql = "INSERT INTO `$table` ($columnsList) VALUES ($placeholders)";
        $this->execute($sql, $data);
        return $this->pdo->lastInsertId();
    }
    
    public function update($table, $data, $where, $whereParams = []) {
        $setClause = [];
        foreach (array_keys($data) as $column) {
            $setClause[] = "`$column` = :$column";
        }
        $setClause = implode(', ', $setClause);
        $sql = "UPDATE `$table` SET $setClause WHERE $where";
        $params = array_merge($data, $whereParams);
        $stmt = $this->execute($sql, $params);
        return $stmt->rowCount();
    }
    
    public function delete($table, $where, $whereParams = []) {
        $sql = "DELETE FROM `$table` WHERE $where";
        $stmt = $this->execute($sql, $whereParams);
        return $stmt->rowCount();
    }
    
    private function logQuery($sql, $params, $executionTime) {
        $this->queryCount++;
        if (defined('DEBUG_MODE') && DEBUG_MODE) {
            $this->queryLog[] = [
                'sql' => $sql,
                'params' => $params,
                'execution_time' => round($executionTime * 1000, 2),
                'timestamp' => microtime(true)
            ];
        }
    }
    
    public function getQueryStats() {
        return [
            'query_count' => $this->queryCount,
            'query_log' => $this->queryLog
        ];
    }
    
    public function testConnection() {
        try {
            $this->pdo->query('SELECT 1');
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }
}
?>